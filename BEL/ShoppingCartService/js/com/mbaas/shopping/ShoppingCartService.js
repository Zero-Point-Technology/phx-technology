
  /*******************************************************************
  * ShoppingCartService.js
  * Generated by Backendless Corp.
  ********************************************************************/
		
const Utils = {
  isObject : obj => obj === Object(obj),
  isString : obj => Object.prototype.toString.call(obj).slice(8, -1) === 'String',
  isNumber : obj => Object.prototype.toString.call(obj).slice(8, -1) === 'Number',
  isBoolean: obj => Object.prototype.toString.call(obj).slice(8, -1) === 'Boolean',
  isDate   : obj => Object.prototype.toString.call(obj).slice(8, -1) === 'Date'
}

Backendless.APIServices.ShoppingCartService = {
  deleteItem(cartName,productName) {   
    if (!Utils.isString(cartName)) {
      throw new Error('Invalid value for argument "cartName". Must be string value')
    }
      
    if (!Utils.isString(productName)) {
      throw new Error('Invalid value for argument "productName". Must be string value')
    }
    
    const args = {
      cartName: cartName,
        productName: productName
    }
      
    return Backendless.APIServices.invoke('ShoppingCartService', 'deleteItem', args)
  },

  getInstructions() { 
    const args = null
      
    return Backendless.APIServices.invoke('ShoppingCartService', 'getInstructions', args)
  },

  setQuantity(cartName,productName,quantity) {   
    if (!Utils.isString(cartName)) {
      throw new Error('Invalid value for argument "cartName". Must be string value')
    }
      
    if (!Utils.isString(productName)) {
      throw new Error('Invalid value for argument "productName". Must be string value')
    }
      
    if (!Utils.isNumber(quantity)) {
      throw new Error('Invalid value for argument "quantity". Must be number value')
    }
    
    const args = {
      cartName: cartName,
        productName: productName,
        quantity: quantity
    }
      
    return Backendless.APIServices.invoke('ShoppingCartService', 'setQuantity', args)
  },

  purchase(cartName) {   
    if (!Utils.isString(cartName)) {
      throw new Error('Invalid value for argument "cartName". Must be string value')
    }
    
    const args = cartName
    return Backendless.APIServices.invoke('ShoppingCartService', 'purchase', args)
  },

  getItems(cartName) {   
    if (!Utils.isString(cartName)) {
      throw new Error('Invalid value for argument "cartName". Must be string value')
    }
    
    const args = cartName
    return Backendless.APIServices.invoke('ShoppingCartService', 'getItems', args)
  },

  addItems(cartName,items) {   
    if (!Utils.isString(cartName)) {
      throw new Error('Invalid value for argument "cartName". Must be string value')
    }
      
    if (!Array.isArray(items)) {
      throw new Error('Invalid value for argument "items". Must be array value')
    }
    
    const args = {
      cartName: cartName,
        items: items
    }
      
    return Backendless.APIServices.invoke('ShoppingCartService', 'addItems', args)
  },

  addItem(cartName,item) {   
    if (!Utils.isString(cartName)) {
      throw new Error('Invalid value for argument "cartName". Must be string value')
    }
      if (typeof item !== 'ShoppingItem') {
        throw new Error('Invalid value for argument "item". Must be an ShoppingItem object')
      }
      
    const args = {
      cartName: cartName,
        item: item
    }
      
    return Backendless.APIServices.invoke('ShoppingCartService', 'addItem', args)
  }
}
